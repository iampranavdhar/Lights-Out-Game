{"ast":null,"code":"import _slicedToArray from \"/home/pranav/Desktop/make-a-laugh Challenge/crack-a-laugh/lights-out/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/pranav/Desktop/make-a-laugh Challenge/crack-a-laugh/lights-out/src/Board.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Board(props) {\n  _s();\n\n  const _useState = useState(createBoard),\n        _useState2 = _slicedToArray(_useState, 2),\n        board = _useState2[0],\n        setBoard = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        hasWon = _useState4[0],\n        sethasWon = _useState4[1];\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  function createBoard() {\n    let board = []; // TODO: create array-of-arrays of true/false values\n\n    for (let y = 0; y < 4; y++) {\n      let row = [];\n\n      for (let x = 0; x < 9; x++) {\n        row.push(Math.random() < 0.25);\n      }\n\n      board.push(row);\n    }\n\n    return board;\n  }\n  /** handle changing a cell: update board & determine if winner */\n\n\n  function flipCellsAround(coord) {\n    let board = this.state.board;\n\n    let _coord$split$map = coord.split(\",\").map(Number),\n        _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n        y = _coord$split$map2[0],\n        x = _coord$split$map2[1];\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n      if (x >= 0 && x < 9 && y >= 0 && y < 4) {\n        board[y][x] = !board[y][x];\n      }\n    } // TODO: flip this cell and the cells around it\n\n\n    flipCell(y, x);\n    flipCell(y, x - 1);\n    flipCell(y, x + 1);\n    flipCell(y + 1, x);\n    flipCell(y - 1, x); // win when every cell is turned off\n    // TODO: determine is the game has been won\n\n    let hasWon = board.every(row => row.every(cell => {\n      return cell === false;\n    }));\n    setBoard(board);\n    sethasWon(hasWon);\n  }\n  /** Render game board or winning message. */\n\n\n  function render() {\n    const tableBoard = [];\n\n    for (let y = 0; y < this.props.nrows; y++) {\n      let row = [];\n\n      for (let x = 0; x < this.props.ncols; x++) {\n        let coord = \"\".concat(y, \",\").concat(x);\n        row.push( /*#__PURE__*/_jsxDEV(Cell, {\n          coord: coord,\n          isLit: this.state.board[y][x],\n          flipCellsAroundMe: this.flipCellsAround\n        }, coord, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this));\n      }\n\n      tableBoard.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: row\n      }, \"row\".concat(y), false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 23\n      }, this));\n    }\n\n    let gamePosition;\n    this.state.hasWon ? gamePosition = /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Winner!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 25\n    }, this) : gamePosition = /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"Board-table\",\n        children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: tableBoard\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }, this);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Board\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Lights Out\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), gamePosition]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this) // if the game is won, just show a winning msg along with the leaderboard\n    // TODO\n    // make table board\n    // render leaderboard when won or lost\n    // TODO\n    ;\n  }\n}\n\n_s(Board, \"LxkgXsMfw7HWLngsDDia6Nqwrg4=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/home/pranav/Desktop/make-a-laugh Challenge/crack-a-laugh/lights-out/src/Board.jsx"],"names":["React","useState","Cell","Board","props","createBoard","board","setBoard","hasWon","sethasWon","y","row","x","push","Math","random","flipCellsAround","coord","state","split","map","Number","flipCell","every","cell","render","tableBoard","nrows","ncols","gamePosition"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board(props) {\n  \n  const [board,setBoard] = useState(createBoard);\n  const [hasWon,sethasWon] = useState(false);\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  function createBoard() {\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    for (let y = 0; y < 4; y++) {\n\t\t\tlet row = [];\n\t\t\tfor (let x = 0; x < 9; x++) {\n\t\t\t\trow.push(Math.random() < 0.25);\n\t\t\t}\n\t\t\tboard.push(row);\n\t\t}\n    return board;\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  function flipCellsAround(coord) {\n    let board = this.state.board;\n    let [y, x] = coord.split(\",\").map(Number);\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n      if (x >= 0 && x < 9 && y >= 0 && y < 4) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n    flipCell(y, x);\n    flipCell(y, x - 1); \n    flipCell(y, x + 1); \n    flipCell(y + 1, x); \n    flipCell(y - 1, x);\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n    let hasWon = board.every((row) =>\n      row.every((cell) => {\n        return cell === false;\n      })\n    );\n    setBoard(board);\n    sethasWon(hasWon);\n  }\n\n  /** Render game board or winning message. */\n\n  function render() {\n    const tableBoard = [];\n    for (let y = 0; y < this.props.nrows; y++) {\n      let row = [];\n      for (let x = 0; x < this.props.ncols; x++) {\n        let coord = `${y},${x}`;\n        row.push(\n          <Cell\n            key={coord}\n            coord={coord}\n            isLit={this.state.board[y][x]}\n            flipCellsAroundMe={this.flipCellsAround}\n          />\n        );\n      }\n      tableBoard.push(<tr key={`row${y}`}>{row}</tr>);\n    }\n\n    let gamePosition;\n    this.state.hasWon\n      ? (gamePosition = <h2>Winner!</h2>)\n      : (gamePosition = (\n          <div>\n            <table className=\"Board-table\">\n              <tbody>{tableBoard}</tbody>\n            </table>\n          </div>\n        ));\n\n    return (\n      <div className=\"Board\">\n        <h1>Lights Out</h1>\n        {gamePosition}\n      </div>\n\n    // if the game is won, just show a winning msg along with the leaderboard\n\n    // TODO\n\n    // make table board\n    // render leaderboard when won or lost\n\n    // TODO\n  );}\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}