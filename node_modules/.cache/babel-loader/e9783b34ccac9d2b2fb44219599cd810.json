{"ast":null,"code":"import _slicedToArray from \"/home/pranav/Desktop/make-a-laugh Challenge/crack-a-laugh/lights-out/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/pranav/Desktop/make-a-laugh Challenge/crack-a-laugh/lights-out/src/Board.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\nimport Form from \"./Form\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Board() {\n  _s();\n\n  let _useState = useState(createBoard),\n      _useState2 = _slicedToArray(_useState, 2),\n      board = _useState2[0],\n      setBoard = _useState2[1];\n\n  let _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      hasWon = _useState4[0],\n      sethasWon = _useState4[1];\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  function createBoard() {\n    let board = []; // TODO: create array-of-arrays of true/false values\n\n    for (let y = 0; y < 4; y++) {\n      let row = [];\n\n      for (let x = 0; x < 9; x++) {\n        row.push(Math.random() < 0.25);\n      }\n\n      board.push(row);\n    }\n\n    return board;\n  }\n  /** handle changing a cell: update board & determine if winner */\n\n\n  /*#__PURE__*/\n  _jsxDEV(\"flipCellsAround\", {\n    coord: coord,\n    board: board\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 3\n  }, this);\n  /** Render game board or winning message. */\n\n\n  const tableBoard = [];\n\n  for (let y = 0; y < 4; y++) {\n    let row = [];\n\n    for (let x = 0; x < 9; x++) {\n      let coord = \"\".concat(y, \"-\").concat(x);\n      row.push( /*#__PURE__*/_jsxDEV(Cell, {\n        coord: coord,\n        isLit: board[y][x],\n        flipCellsAroundMe: flipCellsAround\n      }, coord, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this));\n    }\n\n    tableBoard.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: row\n    }, \"row\".concat(y), false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 21\n    }, this));\n  }\n\n  let gamePosition;\n  hasWon ? gamePosition = /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"winningMessage\",\n      children: \"Winner!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Form, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 7\n  }, this) : gamePosition = /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"Board-table\",\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: tableBoard\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 7\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Board\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Lights Out\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), gamePosition]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Board, \"yjAXGNxUJA6buy3kQRhJB9+KjPQ=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/home/pranav/Desktop/make-a-laugh Challenge/crack-a-laugh/lights-out/src/Board.jsx"],"names":["React","useState","Cell","Form","Board","createBoard","board","setBoard","hasWon","sethasWon","y","row","x","push","Math","random","coord","tableBoard","flipCellsAround","gamePosition"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,aAAP;AACA,OAAOC,IAAP,MAAiB,QAAjB;;;AAEA,SAASC,KAAT,GAAiB;AAAA;;AAAA,kBAESH,QAAQ,CAACI,WAAD,CAFjB;AAAA;AAAA,MAEVC,KAFU;AAAA,MAEHC,QAFG;;AAAA,mBAGWN,QAAQ,CAAC,KAAD,CAHnB;AAAA;AAAA,MAGVO,MAHU;AAAA,MAGFC,SAHE;AAKf;;;AAEA,WAASJ,WAAT,GAAuB;AACrB,QAAIC,KAAK,GAAG,EAAZ,CADqB,CAErB;;AACA,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,UAAIC,GAAG,GAAG,EAAV;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1BD,QAAAA,GAAG,CAACE,IAAJ,CAASC,IAAI,CAACC,MAAL,KAAgB,IAAzB;AACD;;AACDT,MAAAA,KAAK,CAACO,IAAN,CAAWF,GAAX;AACD;;AACD,WAAOL,KAAP;AACD;AACD;;;AAEA;AAAA;AACA,IAAA,KAAK,EAAEU,KADP;AAEA,IAAA,KAAK,EAAEV;AAFP;AAAA;AAAA;AAAA;AAAA;AAKA;;;AAGA,QAAMW,UAAU,GAAG,EAAnB;;AACA,OAAK,IAAIP,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,QAAIC,GAAG,GAAG,EAAV;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,UAAII,KAAK,aAAMN,CAAN,cAAWE,CAAX,CAAT;AACAD,MAAAA,GAAG,CAACE,IAAJ,eACE,QAAC,IAAD;AAEE,QAAA,KAAK,EAAEG,KAFT;AAGE,QAAA,KAAK,EAAEV,KAAK,CAACI,CAAD,CAAL,CAASE,CAAT,CAHT;AAIE,QAAA,iBAAiB,EAAEM;AAJrB,SACOF,KADP;AAAA;AAAA;AAAA;AAAA,cADF;AAQD;;AACDC,IAAAA,UAAU,CAACJ,IAAX,eAAgB;AAAA,gBAAqBF;AAArB,oBAAeD,CAAf;AAAA;AAAA;AAAA;AAAA,YAAhB;AACD;;AAED,MAAIS,YAAJ;AACAX,EAAAA,MAAM,GACDW,YAAY,gBACb;AAAA,4BACE;AAAI,MAAA,SAAS,EAAC,gBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UAFE,GAODA,YAAY,gBACb;AAAA,2BACE;AAAO,MAAA,SAAS,EAAC,aAAjB;AAAA,6BACE;AAAA,kBAAQF;AAAR;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UARJ;AAeA,sBACE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEGE,YAFH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAMD;;GApEQf,K;;KAAAA,K;AAuET,eAAeA,KAAf","sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\nimport Form from \"./Form\";\n\nfunction Board() {\n\n  let [board, setBoard] = useState(createBoard);\n  let [hasWon, sethasWon] = useState(false);\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  function createBoard() {\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    for (let y = 0; y < 4; y++) {\n      let row = [];\n      for (let x = 0; x < 9; x++) {\n        row.push(Math.random() < 0.25);\n      }\n      board.push(row);\n    }\n    return board;\n  }\n  /** handle changing a cell: update board & determine if winner */\n\n  <flipCellsAround\n  coord={coord}\n  board={board}\n  />\n\n  /** Render game board or winning message. */\n\n\n  const tableBoard = [];\n  for (let y = 0; y < 4; y++) {\n    let row = [];\n    for (let x = 0; x < 9; x++) {\n      let coord = `${y}-${x}`;\n      row.push(\n        <Cell\n          key={coord}\n          coord={coord}\n          isLit={board[y][x]}\n          flipCellsAroundMe={flipCellsAround}\n        />\n      );\n    }\n    tableBoard.push(<tr key={`row${y}`}>{row}</tr>);\n  }\n  \n  let gamePosition;\n  hasWon\n    ? (gamePosition =\n      <div>\n        <h2 className='winningMessage'>Winner!</h2>\n        <Form/>\n      </div>\n    )\n    : (gamePosition = (\n      <div>\n        <table className=\"Board-table\">\n          <tbody>{tableBoard}</tbody>\n        </table>\n      </div>\n    ));\n\n  return (\n    <div className=\"Board\">\n      <h1>Lights Out</h1>\n      {gamePosition}\n    </div>\n  );\n}\n\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}