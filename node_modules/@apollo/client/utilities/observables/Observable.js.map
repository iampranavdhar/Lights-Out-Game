{"version":3,"file":"Observable.js","sourceRoot":"","sources":["../../../src/utilities/observables/Observable.ts"],"names":[],"mappings":"AAAA,OAAO,UAAU,MAAM,gBAAgB,CAAC;AAIxC,OAAO,mBAAmB,CAAC;AAgB1B,UAAU,CAAC,SAAiB,CAAC,cAAc,CAAC,GAAG,cAAc,OAAO,IAAI,CAAC,CAAC,CAAC,CAAC;AAC7E,OAAO,EAAE,UAAU,EAAE,CAAC","sourcesContent":["import Observable from 'zen-observable';\n\n// This simplified polyfill attempts to follow the ECMAScript Observable\n// proposal (https://github.com/zenparsing/es-observable)\nimport 'symbol-observable';\n\nexport type ObservableSubscription = ZenObservable.Subscription;\nexport type Observer<T> = ZenObservable.Observer<T>;\nexport type Subscriber<T> = ZenObservable.Subscriber<T>;\n\n// Use global module augmentation to add RxJS interop functionality. By\n// using this approach (instead of subclassing `Observable` and adding an\n// ['@@observable']() method), we ensure the exported `Observable` retains all\n// existing type declarations from `@types/zen-observable` (which is important\n// for projects like `apollo-link`).\ndeclare global {\n  interface Observable<T> {\n    ['@@observable'](): Observable<T>;\n  }\n}\n(Observable.prototype as any)['@@observable'] = function () { return this; };\nexport { Observable };\n"]}