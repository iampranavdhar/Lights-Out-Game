{"ast":null,"code":"import _slicedToArray from \"/home/pranav/Desktop/make-a-laugh Challenge/crack-a-laugh/lights-out/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/pranav/Desktop/make-a-laugh Challenge/crack-a-laugh/lights-out/src/Leaderboard.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Leaderboard() {\n  _s();\n\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        data = _useState2[0],\n        setData = _useState2[1];\n\n  function GetData() {\n    const sendingPost = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: '{\"query\": \"{allPersons{name, wins,loses}}\"}'\n    };\n    fetch('http://127.0.0.1:8000/graphql/', sendingPost).then(response => response.json()).then(data => setData(data['data']['allPersons']));\n  }\n\n  ;\n  useEffect(() => {\n    GetData();\n  }, []);\n\n  for (let row = 0; row < data.length; row++) {\n    let cell_row = [];\n    cell_row.push( /*#__PURE__*/_jsxDEV(\"td\", {\n      children: data[row]['name']\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 23\n    }, this));\n    cell_row.push( /*#__PURE__*/_jsxDEV(\"td\", {\n      children: data[row]['wins']\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 23\n    }, this));\n    cell_row.push( /*#__PURE__*/_jsxDEV(\"td\", {\n      children: data[row]['loses']\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 23\n    }, this));\n  }\n\n  return (\n    /*#__PURE__*/\n    // return a leaderboard using the html table tag\n    // data should NOT be hardcoded, should be fetch using graphql from localhost:8000/graphql/\n    // The styling is not a priority. You can refer to SecondStage.png but not necessary to be similar\n    _jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Your score\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        class: \"table_score\",\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Wins\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Loses\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this)\n  );\n}\n\n_s(Leaderboard, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n\n_c = Leaderboard;\nexport default Leaderboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Leaderboard\");","map":{"version":3,"sources":["/home/pranav/Desktop/make-a-laugh Challenge/crack-a-laugh/lights-out/src/Leaderboard.jsx"],"names":["React","useState","useEffect","Leaderboard","data","setData","GetData","sendingPost","method","headers","body","fetch","then","response","json","row","length","cell_row","push"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,QAAR,EAAiBC,SAAjB,QAAiC,OAAjC;;;AACA,SAASC,WAAT,GAAuB;AAAA;;AAAA,oBACKF,QAAQ,CAAC,EAAD,CADb;AAAA;AAAA,QACZG,IADY;AAAA,QACNC,OADM;;AAGnB,WAASC,OAAT,GAAkB;AACd,UAAMC,WAAW,GAAG;AAChBC,MAAAA,MAAM,EAAE,MADQ;AAEhBC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAFO;AAIhBC,MAAAA,IAAI,EAAE;AAJU,KAApB;AAOCC,IAAAA,KAAK,CAAC,gCAAD,EAAmCJ,WAAnC,CAAL,CACIK,IADJ,CACSC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADrB,EAEIF,IAFJ,CAESR,IAAI,IAAIC,OAAO,CAACD,IAAI,CAAC,MAAD,CAAJ,CAAa,YAAb,CAAD,CAFxB;AAIJ;;AAAA;AACDF,EAAAA,SAAS,CAAC,MAAM;AACZI,IAAAA,OAAO;AACV,GAFQ,EAEP,EAFO,CAAT;;AAIA,OAAK,IAAIS,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGX,IAAI,CAACY,MAA7B,EAAqCD,GAAG,EAAxC,EAA4C;AACxC,QAAIE,QAAQ,GAAG,EAAf;AACAA,IAAAA,QAAQ,CAACC,IAAT,eAAc;AAAA,gBAAKd,IAAI,CAACW,GAAD,CAAJ,CAAU,MAAV;AAAL;AAAA;AAAA;AAAA;AAAA,YAAd;AACAE,IAAAA,QAAQ,CAACC,IAAT,eAAc;AAAA,gBAAKd,IAAI,CAACW,GAAD,CAAJ,CAAU,MAAV;AAAL;AAAA;AAAA;AAAA;AAAA,YAAd;AACAE,IAAAA,QAAQ,CAACC,IAAT,eAAc;AAAA,gBAAKd,IAAI,CAACW,GAAD,CAAJ,CAAU,OAAV;AAAL;AAAA;AAAA;AAAA;AAAA,YAAd;AACH;;AAID;AAAA;AACI;AACA;AACA;AACA,YAAC,KAAD,CAAO,QAAP;AAAA,8BAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ,eAII;AAAO,QAAA,KAAK,EAAC,aAAb;AAAA,+BACI;AAAA,kCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAJJ;AAkBH;;GA/CQZ,W;;KAAAA,W;AAiDT,eAAeA,WAAf","sourcesContent":["import React from 'react';\nimport {useState,useEffect} from 'react';\nfunction Leaderboard() {\n    const [data, setData] = useState([]); \n\n    function GetData(){    \n        const sendingPost = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n\n            body: '{\"query\": \"{allPersons{name, wins,loses}}\"}'\n        };\n\n         fetch('http://127.0.0.1:8000/graphql/', sendingPost)\n            .then(response => response.json())\n            .then(data => setData(data['data']['allPersons']));\n\n    };\n    useEffect(() => {\n        GetData();\n    },[])\n\n    for (let row = 0; row < data.length; row++) {\n        let cell_row = [];\n        cell_row.push(<td>{data[row]['name']}</td>);\n        cell_row.push(<td>{data[row]['wins']}</td>);\n        cell_row.push(<td>{data[row]['loses']}</td>);\n    }\n\n\n\n    return(\n        // return a leaderboard using the html table tag\n        // data should NOT be hardcoded, should be fetch using graphql from localhost:8000/graphql/\n        // The styling is not a priority. You can refer to SecondStage.png but not necessary to be similar\n        <React.Fragment>\n\n\n            <h3>Your score</h3>\n            <table class=\"table_score\">\n                <tr>\n                    <th>Name</th>\n                    <th>Wins</th>\n                    <th>Loses</th>\n                </tr>\n                {}\n            </table>\n        </React.Fragment>\n    );\n}\n\nexport default Leaderboard;"]},"metadata":{},"sourceType":"module"}