{"ast":null,"code":"import _slicedToArray from \"/home/pranav/Desktop/make-a-laugh Challenge/crack-a-laugh/lights-out/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction flipCellsAround({\n  coord,\n  ramp\n}) {\n  let b = {\n    board\n  };\n\n  let _coord$split$map = {\n    coord\n  }.split(\"-\").map(Number),\n      _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n      y = _coord$split$map2[0],\n      x = _coord$split$map2[1];\n\n  function flipCell(y, x) {\n    // if this coord is actually on board, flip it\n    if (x >= 0 && x < 9 && y >= 0 && y < 4) {\n      board[y][x] = !board[y][x];\n    }\n  } // TODO: flip this cell and the cells around it\n\n\n  flipCell(y, x);\n  flipCell(y, x - 1);\n  flipCell(y, x + 1);\n  flipCell(y + 1, x);\n  flipCell(y - 1, x); // win when every cell is turned off\n  // TODO: determine is the game has been won\n\n  let hasWon = board.every(row => row.every(cell => {\n    return cell === false;\n  }));\n  setBoard(board);\n  sethasWon(hasWon);\n}","map":{"version":3,"sources":["/home/pranav/Desktop/make-a-laugh Challenge/crack-a-laugh/lights-out/src/flipCellsAround.js"],"names":["flipCellsAround","coord","ramp","b","board","split","map","Number","y","x","flipCell","hasWon","every","row","cell","setBoard","sethasWon"],"mappings":";;AAAA,SAASA,eAAT,CAAyB;AAACC,EAAAA,KAAD;AAAOC,EAAAA;AAAP,CAAzB,EAAuC;AACnC,MAAIC,CAAC,GAAG;AAACC,IAAAA;AAAD,GAAR;;AADmC,yBAEtB;AAACH,IAAAA;AAAD,IAAQI,KAAR,CAAc,GAAd,EAAmBC,GAAnB,CAAuBC,MAAvB,CAFsB;AAAA;AAAA,MAE9BC,CAF8B;AAAA,MAE3BC,CAF2B;;AAKnC,WAASC,QAAT,CAAkBF,CAAlB,EAAqBC,CAArB,EAAwB;AACtB;AACA,QAAIA,CAAC,IAAI,CAAL,IAAUA,CAAC,GAAG,CAAd,IAAmBD,CAAC,IAAI,CAAxB,IAA6BA,CAAC,GAAG,CAArC,EAAwC;AACtCJ,MAAAA,KAAK,CAACI,CAAD,CAAL,CAASC,CAAT,IAAc,CAACL,KAAK,CAACI,CAAD,CAAL,CAASC,CAAT,CAAf;AACD;AACF,GAVkC,CAYnC;;;AACAC,EAAAA,QAAQ,CAACF,CAAD,EAAIC,CAAJ,CAAR;AACAC,EAAAA,QAAQ,CAACF,CAAD,EAAIC,CAAC,GAAG,CAAR,CAAR;AACAC,EAAAA,QAAQ,CAACF,CAAD,EAAIC,CAAC,GAAG,CAAR,CAAR;AACAC,EAAAA,QAAQ,CAACF,CAAC,GAAG,CAAL,EAAQC,CAAR,CAAR;AACAC,EAAAA,QAAQ,CAACF,CAAC,GAAG,CAAL,EAAQC,CAAR,CAAR,CAjBmC,CAkBnC;AACA;;AACA,MAAIE,MAAM,GAAGP,KAAK,CAACQ,KAAN,CAAaC,GAAD,IACvBA,GAAG,CAACD,KAAJ,CAAWE,IAAD,IAAU;AAClB,WAAOA,IAAI,KAAK,KAAhB;AACD,GAFD,CADW,CAAb;AAKAC,EAAAA,QAAQ,CAACX,KAAD,CAAR;AACAY,EAAAA,SAAS,CAACL,MAAD,CAAT;AACD","sourcesContent":["function flipCellsAround({coord,ramp}) {\n    let b = {board};\n    let [y, x] = {coord}.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n      if (x >= 0 && x < 9 && y >= 0 && y < 4) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n    flipCell(y, x);\n    flipCell(y, x - 1);\n    flipCell(y, x + 1);\n    flipCell(y + 1, x);\n    flipCell(y - 1, x);\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n    let hasWon = board.every((row) =>\n      row.every((cell) => {\n        return cell === false;\n      })\n    );\n    setBoard(board);\n    sethasWon(hasWon);\n  }"]},"metadata":{},"sourceType":"module"}