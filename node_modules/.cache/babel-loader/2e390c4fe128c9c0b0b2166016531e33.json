{"ast":null,"code":"import _slicedToArray from \"/home/pranav/Projects/College/Lights-Out/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/pranav/Projects/College/Lights-Out/src/Board.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Board() {\n  _s();\n\n  let _useState = useState(createBoard),\n      _useState2 = _slicedToArray(_useState, 2),\n      board = _useState2[0],\n      setBoard = _useState2[1];\n\n  let _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      hasWon = _useState4[0],\n      sethasWon = _useState4[1];\n\n  let _useState5 = useState(20),\n      _useState6 = _slicedToArray(_useState5, 2),\n      tries = _useState6[0],\n      setTries = _useState6[1];\n\n  function createBoard() {\n    let board = []; // creating array-of-arrays of true/false values\n\n    for (let y = 0; y < 4; y++) {\n      let row = [];\n\n      for (let x = 0; x < 9; x++) {\n        row.push(Math.random() < 0.25);\n      }\n\n      board.push(row);\n    }\n\n    return board;\n  }\n  /**Changing a cell: Updating board & determining if winner */\n\n\n  function flipCellsAround(coord) {\n    let newboard = Object.assign([], board);\n\n    let _coord$split$map = coord.split(\"-\").map(Number),\n        _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n        y = _coord$split$map2[0],\n        x = _coord$split$map2[1];\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n      if (x >= 0 && x < 9 && y >= 0 && y < 4) {\n        newboard[y][x] = !newboard[y][x];\n      }\n    } // Flipping this cell and the cells around it\n\n\n    flipCell(y, x);\n    flipCell(y, x - 1);\n    flipCell(y, x + 1);\n    flipCell(y + 1, x);\n    flipCell(y - 1, x); // Win when every cell is turned off\n    // Determining is the game has been won\n\n    let hasWon = board.every(row => row.every(cell => {\n      return cell === false;\n    }));\n    let left = tries;\n    left--;\n    setTries(left);\n    setBoard(newboard);\n    sethasWon(hasWon);\n  }\n  /** Render game board or winning message. */\n\n\n  const tableBoard = [];\n\n  for (let y = 0; y < 4; y++) {\n    let row = [];\n\n    for (let x = 0; x < 9; x++) {\n      let coord = \"\".concat(y, \"-\").concat(x);\n      row.push( /*#__PURE__*/_jsxDEV(Cell, {\n        coord: coord,\n        isLit: board[y][x],\n        flipCellsAroundMe: flipCellsAround\n      }, coord, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this));\n    }\n\n    tableBoard.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: row\n    }, \"row\".concat(y), false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 21\n    }, this));\n  }\n\n  return hasWon ? /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Lights Out\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"winningMessage\",\n      children: \"Winner!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this) : tries > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Lights Out\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"Board\",\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: tableBoard\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"left\",\n      children: [\"Tries left: \", tries]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 9\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h\", {\n      className: \"over\",\n      children: \"Game Over\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"h\", {\n      className: \"over\",\n      children: \"You Lost!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"left\",\n      children: [\"Tries left: \", tries]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Board, \"TcG+elxIXOXdwZc9HWnq489iQsU=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/home/pranav/Projects/College/Lights-Out/src/Board.jsx"],"names":["React","useState","Cell","Board","createBoard","board","setBoard","hasWon","sethasWon","tries","setTries","y","row","x","push","Math","random","flipCellsAround","coord","newboard","Object","assign","split","map","Number","flipCell","every","cell","left","tableBoard"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\nfunction Board() {\n\n  let [board, setBoard] = useState(createBoard);\n  let [hasWon, sethasWon] = useState(false);\n  let [tries,setTries] = useState(20);\n\n  function createBoard() {\n    let board = [];\n    // creating array-of-arrays of true/false values\n    for (let y = 0; y < 4; y++) {\n      let row = [];\n      for (let x = 0; x < 9; x++) {\n        row.push(Math.random() < 0.25);\n      }\n      board.push(row);\n    }\n    return board;\n  }\n  /**Changing a cell: Updating board & determining if winner */\n\n  function flipCellsAround(coord) {\n    let newboard = Object.assign([],board);   \n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n      if (x >= 0 && x < 9 && y >= 0 && y < 4) {\n        newboard[y][x] = !newboard[y][x];\n      }\n    }\n\n    // Flipping this cell and the cells around it\n    flipCell(y, x);\n    flipCell(y, x - 1);\n    flipCell(y, x + 1);\n    flipCell(y + 1, x);\n    flipCell(y - 1, x);\n    // Win when every cell is turned off\n    // Determining is the game has been won\n    let hasWon = board.every((row) =>\n      row.every((cell) => {\n        return cell === false;\n      })\n    );\n\n    let left = tries\n    left--\n    setTries(left);\n    setBoard(newboard);\n    sethasWon(hasWon);\n  }\n\n  /** Render game board or winning message. */\n\n\n  const tableBoard = [];\n  for (let y = 0; y < 4; y++) {\n    let row = [];\n    for (let x = 0; x < 9; x++) {\n      let coord = `${y}-${x}`;\n      row.push(\n        <Cell\n          key={coord}\n          coord={coord}\n          isLit={board[y][x]}\n          flipCellsAroundMe={flipCellsAround}\n        />\n      );\n    }\n    tableBoard.push(<tr key={`row${y}`}>{row}</tr>);\n  }\n  \n\n  return (\n    hasWon\n      ? (\n        <div>\n          <h1 className='title'>Lights Out</h1>\n          <h2 className='winningMessage'>Winner!</h2>\n        </div>\n      )\n      : tries>0\n      ?(\n        <div>\n          <h1 className='title'>Lights Out</h1>\n          <table className=\"Board\">\n            <tbody>{tableBoard}</tbody>\n          </table>\n          <div className='left'>\n            Tries left: {tries}\n          </div>\n        </div>\n      )\n      :(\n        <div>\n          <h className='over'>Game Over</h>\n          <h className='over'>You Lost!</h>\n          <div className='left'>\n            Tries left: {tries}\n          </div>\n        </div>\n        \n      ));\n}\n\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}