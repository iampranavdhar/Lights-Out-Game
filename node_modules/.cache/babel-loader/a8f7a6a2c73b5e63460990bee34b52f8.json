{"ast":null,"code":"import _slicedToArray from \"/home/pranav/Desktop/make-a-laugh Challenge/crack-a-laugh/lights-out/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/pranav/Desktop/make-a-laugh Challenge/crack-a-laugh/lights-out/src/Board.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Board() {\n  _s();\n\n  const _useState = useState(createBoard),\n        _useState2 = _slicedToArray(_useState, 2),\n        board = _useState2[0],\n        setBoard = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        hasWon = _useState4[0],\n        sethasWon = _useState4[1];\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n\n  function createBoard() {\n    let board = []; // TODO: create array-of-arrays of true/false values\n\n    for (let y = 0; y < 4; y++) {\n      let row = [];\n\n      for (let x = 0; x < 9; x++) {\n        row.push(Math.random() < 0.25);\n      }\n\n      board.push(row);\n    }\n\n    return board;\n  }\n  /** handle changing a cell: update board & determine if winner */\n\n\n  function flipCellsAround(coord) {\n    let board = setBoard();\n\n    let _coord$split$map = coord.split(\",\").map(Number),\n        _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n        y = _coord$split$map2[0],\n        x = _coord$split$map2[1];\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n      if (x >= 0 && x < 9 && y >= 0 && y < 4) {\n        board[y][x] = !board[y][x];\n      }\n    } // TODO: flip this cell and the cells around it\n\n\n    flipCell(y, x);\n    flipCell(y, x - 1);\n    flipCell(y, x + 1);\n    flipCell(y + 1, x);\n    flipCell(y - 1, x); // win when every cell is turned off\n    // TODO: determine is the game has been won\n\n    let hasWon = board.every(row => row.every(cell => {\n      return cell === false;\n    }));\n    setBoard(board);\n    sethasWon(hasWon);\n  }\n  /** Render game board or winning message. */\n\n\n  const tableBoard = [];\n\n  for (let y = 0; y < 4; y++) {\n    let row = [];\n\n    for (let x = 0; x < 9; x++) {\n      let coord = \"\".concat(y, \",\").concat(x);\n      row.push( /*#__PURE__*/_jsxDEV(Cell, {\n        coord: coord,\n        isLit: board[y][x],\n        flipCellsAroundMe: flipCellsAround\n      }, coord, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this));\n    }\n\n    tableBoard.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: row\n    }, \"row\".concat(y), false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 21\n    }, this));\n  }\n\n  let gamePosition;\n  hasWon ? gamePosition = /*#__PURE__*/_jsxDEV(\"h2\", {\n    className: \"winningMessage\",\n    children: \"Winner!\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 23\n  }, this) : gamePosition = /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"Board-table\",\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: tableBoard\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 7\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Board\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Lights Out\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), gamePosition]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Board, \"yjAXGNxUJA6buy3kQRhJB9+KjPQ=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/home/pranav/Desktop/make-a-laugh Challenge/crack-a-laugh/lights-out/src/Board.jsx"],"names":["React","useState","Cell","Board","createBoard","board","setBoard","hasWon","sethasWon","y","row","x","push","Math","random","flipCellsAround","coord","split","map","Number","flipCell","every","cell","tableBoard","gamePosition"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\nfunction Board() {\n\n  const [board, setBoard] = useState(createBoard);\n  const [hasWon, sethasWon] = useState(false);\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  function createBoard() {\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    for (let y = 0; y < 4; y++) {\n      let row = [];\n      for (let x = 0; x < 9; x++) {\n        row.push(Math.random() < 0.25);\n      }\n      board.push(row);\n    }\n    return board;\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  function flipCellsAround(coord) {\n    let board = setBoard();\n    let [y, x] = coord.split(\",\").map(Number);\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n      if (x >= 0 && x < 9 && y >= 0 && y < 4) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n    flipCell(y, x);\n    flipCell(y, x - 1);\n    flipCell(y, x + 1);\n    flipCell(y + 1, x);\n    flipCell(y - 1, x);\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n    let hasWon = board.every((row) =>\n      row.every((cell) => {\n        return cell === false;\n      })\n    );\n    setBoard(board);\n    sethasWon(hasWon);\n  }\n\n  /** Render game board or winning message. */\n\n\n  const tableBoard = [];\n  for (let y = 0; y < 4; y++) {\n    let row = [];\n    for (let x = 0; x < 9; x++) {\n      let coord = `${y},${x}`;\n      row.push(\n        <Cell\n          key={coord}\n          coord={coord}\n          isLit={board[y][x]}\n          flipCellsAroundMe={flipCellsAround}\n        />\n      );\n    }\n    tableBoard.push(<tr key={`row${y}`}>{row}</tr>);\n  }\n  let gamePosition;\n  hasWon\n    ? (gamePosition = <h2 className='winningMessage'>Winner!</h2>)\n    : (gamePosition = (\n      <div>\n        <table className=\"Board-table\">\n          <tbody>{tableBoard}</tbody>\n        </table>\n      </div>\n    ));\n\n  return (\n    <div className=\"Board\">\n      <h1>Lights Out</h1>\n      {gamePosition}\n    </div>\n  );\n}\n\n\nexport default Board;"]},"metadata":{},"sourceType":"module"}