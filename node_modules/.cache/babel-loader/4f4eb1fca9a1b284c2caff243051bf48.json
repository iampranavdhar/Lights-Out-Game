{"ast":null,"code":"var _jsxFileName = \"/home/pranav/Desktop/make-a-laugh Challenge/crack-a-laugh/lights-out/src/Cell.jsx\";\nimport React, { Component } from 'react';\nimport \"./Cell.css\";\n/** A single cell on the board.\n *\n * This has no state --- just two props:\n *\n * - flipCellsAroundMe: a function rec'd from the board which flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling flipCellsAroundMe\n *\n **/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Cell({\n  coord,\n  isLit,\n  key,\n  flipCellsAroundMe\n}) {\n  const handleClick = evt => {\n    // call up to the board to flip cells around this cell\n    props.flipCellsAroundMe({\n      co\n    });\n  };\n\n  let classes = \"Cell\" + ({\n    isLit\n  } ? \" Cell-lit\" : \"\");\n  return /*#__PURE__*/_jsxDEV(\"td\", {\n    className: classes,\n    onClick: handleClick\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 10\n  }, this);\n}\n\n_c = Cell;\nexport default Cell;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cell\");","map":{"version":3,"sources":["/home/pranav/Desktop/make-a-laugh Challenge/crack-a-laugh/lights-out/src/Cell.jsx"],"names":["React","Component","Cell","coord","isLit","key","flipCellsAroundMe","handleClick","evt","props","co","classes"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAO,YAAP;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAEA,SAASC,IAAT,CAAc;AAACC,EAAAA,KAAD;AAAOC,EAAAA,KAAP;AAAaC,EAAAA,GAAb;AAAiBC,EAAAA;AAAjB,CAAd,EAAmD;AAEjD,QAAMC,WAAW,GAAIC,GAAD,IAAS;AAC3B;AACAC,IAAAA,KAAK,CAACH,iBAAN,CAAwB;AAACI,MAAAA;AAAD,KAAxB;AACD,GAHD;;AAKA,MAAIC,OAAO,GAAG,UAAU;AAACP,IAAAA;AAAD,MAAU,WAAV,GAAwB,EAAlC,CAAd;AAEA,sBAAO;AAAI,IAAA,SAAS,EAAEO,OAAf;AAAwB,IAAA,OAAO,EAAEJ;AAAjC;AAAA;AAAA;AAAA;AAAA,UAAP;AACC;;KAVML,I;AAaT,eAAeA,IAAf","sourcesContent":["import React, {Component} from 'react'\nimport \"./Cell.css\"\n\n\n/** A single cell on the board.\n *\n * This has no state --- just two props:\n *\n * - flipCellsAroundMe: a function rec'd from the board which flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling flipCellsAroundMe\n *\n **/\n\nfunction Cell({coord,isLit,key,flipCellsAroundMe}) {\n\n  const handleClick = (evt) => {\n    // call up to the board to flip cells around this cell\n    props.flipCellsAroundMe({co});\n  };\n\n  let classes = \"Cell\" + ({isLit} ? \" Cell-lit\" : \"\");\n\n  return <td className={classes} onClick={handleClick} />;\n  }\n\n\nexport default Cell"]},"metadata":{},"sourceType":"module"}